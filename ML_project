import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import numpy as np
import matplotlib.pyplot as plt

# Загрузка и предобработка данных
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') / 255
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)

# Создание модели нейронной сети
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Обучение модели
model.fit(x_train, y_train, batch_size=128, epochs=5, validation_data=(x_test, y_test))

# Оценка точности модели
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Test accuracy:", test_acc)

# Пример предсказания на тестовом изображении
def predict_digit(image_index):
    plt.imshow(x_test[image_index].reshape(28, 28), cmap='gray')
    plt.axis('off')
    plt.show()
    prediction = np.argmax(model.predict(x_test[image_index].reshape(1, 28, 28, 1)))
    print("Model prediction:", prediction)

# Предсказание на случайном изображении из тестового набора данных
import random
random_image_index = random.randint(0, len(x_test))
predict_digit(random_image_index)
